#! /usr/bin/env python

PACKAGE="uvc_ros_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#general parameters
gen.add("CAMERA_AUTOEXP", bool_t, 0, "Enable auto exposure AEC function.", True)
gen.add("CAMERA_EXP", int_t, 0, "Exposure time when AEC disabled.", 40, 0, 480)
gen.add("CAMERA_MIN_E", int_t, 0, "Minimum exposure time when AEC enabled", 0, 0, 480)
gen.add("CAMERA_MAX_E", int_t, 0, "Maximum exposure time when AEC enabled", 378, 0, 480)
gen.add("CAMERA_AUTOG", bool_t, 0, "Enable auto exposure AEC function.", True)
gen.add("CAMERA_GAIN", int_t, 0, "Exposure time when AEC disabled.", 16, 16, 64)
gen.add("PRIMARY_CAM_MODE", bool_t, 0, "Enable primary camera pair mode.", True)
gen.add("CAMERA_TILE", bool_t, 0, "Enable camera tile exposure mode", False)
gen.add("STEREO_BAYER_D", bool_t, 0, "Disable bayer pattern removal", False)
gen.add("ADIS_IMU", bool_t, 0, "Enable the external IMU.", True);
gen.add("RAW_ENABLED", bool_t, 0, "If raw camera infomation is output", True);
gen.add("RECT_ENABLED", bool_t, 0, "If rect camera infomation is output", False);

#flip parameters for all 9 cameras
gen.add("CAMERA_0_HFLIP", bool_t, 0, "Enable horizontal image flip", True)
gen.add("CAMERA_0_VFLIP", bool_t, 0, "Enable vertical image flip.", True)
gen.add("CAMERA_1_HFLIP", bool_t, 0, "Enable horizontal image flip", False)
gen.add("CAMERA_1_VFLIP", bool_t, 0, "Enable vertical image flip.", False)
gen.add("CAMERA_2_HFLIP", bool_t, 0, "Enable horizontal image flip", True)
gen.add("CAMERA_2_VFLIP", bool_t, 0, "Enable vertical image flip.", True)
gen.add("CAMERA_3_HFLIP", bool_t, 0, "Enable horizontal image flip", False)
gen.add("CAMERA_3_VFLIP", bool_t, 0, "Enable vertical image flip.", False)
gen.add("CAMERA_4_HFLIP", bool_t, 0, "Enable horizontal image flip", True)
gen.add("CAMERA_4_VFLIP", bool_t, 0, "Enable vertical image flip.", True)
gen.add("CAMERA_5_HFLIP", bool_t, 0, "Enable horizontal image flip", False)
gen.add("CAMERA_5_VFLIP", bool_t, 0, "Enable vertical image flip.", False)
gen.add("CAMERA_6_HFLIP", bool_t, 0, "Enable horizontal image flip", True)
gen.add("CAMERA_6_VFLIP", bool_t, 0, "Enable vertical image flip.", True)
gen.add("CAMERA_7_HFLIP", bool_t, 0, "Enable horizontal image flip", False)
gen.add("CAMERA_7_VFLIP", bool_t, 0, "Enable vertical image flip.", False)
gen.add("CAMERA_8_HFLIP", bool_t, 0, "Enable horizontal image flip", True)
gen.add("CAMERA_8_VFLIP", bool_t, 0, "Enable vertical image flip.", True)
gen.add("CAMERA_9_HFLIP", bool_t, 0, "Enable horizontal image flip", False)
gen.add("CAMERA_9_VFLIP", bool_t, 0, "Enable vertical image flip.", False)

#stereo parameter for all 5 pairs
gen.add("STEREO_TH_CAM1", int_t, 0, "Disparity matching threshold value", 100, 0, 255)
gen.add("STEREO_LR_CAM1", int_t, 0, "Disparity matching LR check value", 2, 0, 31)
gen.add("STEREO_OF_CAM1", int_t, 0, "Disparity range offset", 0, 0, 127)
gen.add("STEREO_P1_CAM1", int_t, 0, "SGM penalty cost 1", 10, 0, 127)
gen.add("STEREO_P2_CAM1", int_t, 0, "SGM penalty cost2", 250, 0, 255)
gen.add("STEREO_RE_CAM1", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_CE_CAM1", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_FP_CAM1", bool_t, 0, "Switch left and right camera inputs", False)

gen.add("STEREO_TH_CAM3", int_t, 0, "Disparity matching threshold value", 100, 0, 255)
gen.add("STEREO_LR_CAM3", int_t, 0, "Disparity matching LR check value", 2, 0, 31)
gen.add("STEREO_OF_CAM3", int_t, 0, "Disparity range offset", 0, 0, 127)
gen.add("STEREO_P1_CAM3", int_t, 0, "SGM penalty cost 1", 10, 0, 127)
gen.add("STEREO_P2_CAM3", int_t, 0, "SGM penalty cost2", 250, 0, 255)
gen.add("STEREO_RE_CAM3", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_CE_CAM3", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_FP_CAM3", bool_t, 0, "Switch left and right camera inputs", False)

gen.add("STEREO_TH_CAM5", int_t, 0, "Disparity matching threshold value", 100, 0, 255)
gen.add("STEREO_LR_CAM5", int_t, 0, "Disparity matching LR check value", 2, 0, 31)
gen.add("STEREO_OF_CAM5", int_t, 0, "Disparity range offset", 0, 0, 127)
gen.add("STEREO_P1_CAM5", int_t, 0, "SGM penalty cost 1", 10, 0, 127)
gen.add("STEREO_P2_CAM5", int_t, 0, "SGM penalty cost2", 250, 0, 255)
gen.add("STEREO_RE_CAM5", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_CE_CAM5", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_FP_CAM5", bool_t, 0, "Switch left and right camera inputs", False)

gen.add("STEREO_TH_CAM7", int_t, 0, "Disparity matching threshold value", 100, 0, 255)
gen.add("STEREO_LR_CAM7", int_t, 0, "Disparity matching LR check value", 2, 0, 31)
gen.add("STEREO_OF_CAM7", int_t, 0, "Disparity range offset", 0, 0, 127)
gen.add("STEREO_P1_CAM7", int_t, 0, "SGM penalty cost 1", 10, 0, 127)
gen.add("STEREO_P2_CAM7", int_t, 0, "SGM penalty cost2", 250, 0, 255)
gen.add("STEREO_RE_CAM7", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_CE_CAM7", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_FP_CAM7", bool_t, 0, "Switch left and right camera inputs", False)

gen.add("STEREO_TH_CAM9", int_t, 0, "Disparity matching threshold value", 100, 0, 255)
gen.add("STEREO_LR_CAM9", int_t, 0, "Disparity matching LR check value", 2, 0, 31)
gen.add("STEREO_OF_CAM9", int_t, 0, "Disparity range offset", 0, 0, 127)
gen.add("STEREO_P1_CAM9", int_t, 0, "SGM penalty cost 1", 10, 0, 127)
gen.add("STEREO_P2_CAM9", int_t, 0, "SGM penalty cost2", 250, 0, 255)
gen.add("STEREO_RE_CAM9", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_CE_CAM9", bool_t, 0, "Enable disparity output.", False)
gen.add("STEREO_FP_CAM9", bool_t, 0, "Switch left and right camera inputs", False)

#post processing depth
gen.add("DEBAYER", bool_t, 0, "If the raw lefthand image needs to be debayered", True);
gen.add("WHITE_BALANCE", bool_t, 0, "If the debayered image should be white balanced", True);
gen.add("GEN_POINTCLOUD", bool_t, 0, "If the pointcloud is generated", True);
gen.add("SPECKLE_FILTER", bool_t, 0, "If a speckle filter should be applied", True);
gen.add("MAX_SPECKLE_SIZE", int_t, 0, "Max size to classify as speckle.", 1000, 100, 2000)
gen.add("MAX_SPECKLE_DIFF", int_t, 0, "Max difference in intensity when building speckle cluster.", 10, 1, 100);

exit(gen.generate(PACKAGE, "uvc_ros_driver", "UvcDriver"))
